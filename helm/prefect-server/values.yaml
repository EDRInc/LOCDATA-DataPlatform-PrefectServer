# Default values for prefect-server.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

postgresqlPassword: password 
# PostgreSQL's Prefect user password (username is specified by global.postgresql.postgresqlUsername)

global:
  # namespace to deploy into (NB for the moment just Release.Namespace)
  # namespace: prefect-server

  # suffix for service FQDN
  fqdnSuffix: "svc.cluster.local"

  # labels to merge into all configs
  labels: {}

  # selector labels to merge into all configs
  # used for pod matching
  selectorLabels: {}

  # annotations to merge into all configs
  annotations: null

  # In accordance with https://hub.helm.sh/charts/bitnami/postgresql
  # Use these whether or not postgres is installed as dependency, as
  # they are used to build the postgres url.
  postgresql:
    postgresqlDatabase: prefect
    postgresqlUsername: prefect
    postgresqlPassword: "{{ .Values.postgresqlPassword }}"
  
    # see bitname/postgresql documentation; include at least keys:
    # * `postgresql-password` for `postgresqlUsername` user,
    # * `postgresql-postgres-password` for admin user.
    #
    # If not set, defaults to "{{ .Release.Name }}-postgresql", which
    # is secret that bitnami/postgresql will create. 
    # For external postgres, should either specify `existingSecret` 
    # or create default using the provided password.
    existingSecret: null
    servicePort: 5432
    # if postgres is not enabled, set external host.
    # NOTE: `servicePort` still defines port; and `existingSecret`
    # should still contain passwords.
    postgresqlExternalHost:  "" 
    # DNS for PostgreSQL database

  hasura:
    port: 3000
  graphql:
    port: 4201
  towel: {}
  apollo:
    port: 4200
  ui:
    port: 8080

  prefect:
    # Fed through to config.toml in 
    # graphql and towel via environment variables. See 
    # src/prefect_server/config.toml for (a bit of) explanation.
    #
    # Any values can be put here, will result in environment
    # variable definitions starting with "PREFECT_SERVER__"
    config:
      env: "local"
      debug: "false"
      queued_runs_returned_limit: "25"
      hasura:
        execute_retry_seconds: "10"
      logging:
        level: "DEBUG"
        format: "[%(asctime)s] %(levelname)s - %(name)s | %(message)s"
      services:
        scheduler:
          scheduler_loop_seconds: "300"
        lazarus:
          resurrection_attempt_limit: "3"
      telemetry:
        enabled: "true"

# whether to use postgres dependency (true) or external postgres (false)
postgresqlEnabled: false

# postgresql configuration
# see https://hub.helm.sh/charts/bitnami/postgresql for all options
postgresql:
  persistence:
    enabled: false
    size: 8Gi
  initdbUser: postgres
  # initdbPassword: "$POSTGRESQL_POSTGRES_PASSWORD"
  initdbScripts:
    create_pgcrypto.sql: |
      -- create pgcrypto extension, required for UUID
      CREATE EXTENSION IF NOT EXISTS pgcrypto;
      CREATE EXTENSION IF NOT EXISTS "pg_trgm";
      SET TIME ZONE 'UTC';

hasura:
  nameOverride:
  image:
    repository: hasura/graphql-engine
    version: v1.3.0
    pullPolicy: IfNotPresent
  options:
    queryPlanCacheSize: "100"
  service:
    type: ClusterIP
    # port set to global.hasura.port

  labels: {}
  annotations: {}
  replicaCount: 1
  podSecurityContext: {}
  securityContext: {}
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  imagePullSecrets: []

graphql:
  image:
    repository: prefecthq/server
    version: "{{ .Chart.AppVersion }}"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    # port set to global.graphql.port

  labels: {}
  annotations: null
  replicaCount: 1
  podSecurityContext: {}
  securityContext: {}
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  imagePullSecrets: []
  init:
    resources: {}

towel:
  image:
    repository: prefecthq/server
    version: "{{ .Chart.AppVersion }}"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    # port set to global.towel.port

  labels: {}
  annotations: null
  replicaCount: 1
  podSecurityContext: {}
  securityContext: {}
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  imagePullSecrets: []

apollo:
  image: 
    repository: prefecthq/apollo
    version: "2020-08-21"
    pullPolicy: IfNotPresent
  options:
    telemetryEnabled: true
  service:
    type: ClusterIP
    # port set to global.apollo.port
  ingress:
    enabled: false
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"

    # specify at least one host if ingress is enabled
    hosts: []
      # - host: foo.bar
      #   paths: [ '/' ]
    tls: null

  labels: {}
  annotations: null
  replicaCount: 1
  podSecurityContext: {}
  securityContext: {}
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  imagePullSecrets: []

ui:
  image: 
    repository: prefecthq/ui
    version: "2020-08-20"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    # port set to global.ui.port
  ingress:
    enabled: false
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"

    # specify at least one host if ingress is enabled
    hosts: []
      # - host: 
      #   paths: []
    tls: []

  labels: {}
  annotations: null
  replicaCount: 1
  podSecurityContext: {}
  securityContext: {}
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  imagePullSecrets: []

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: null

# podSecurityContext: {}
#   # fsGroup: 2000

# securityContext: {}
#   # capabilities:
#   #   drop:
#   #   - ALL
#   # readOnlyRootFilesystem: true
#   # runAsNonRoot: true
#   # runAsUser: 1000

